// <auto-generated />
using System;
using BlazorMedical.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BlazorMedical.Data.Migrations
{
    [DbContext(typeof(MedicalContext))]
    [Migration("20210407023148_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BlazorMedical.Data.Entities.Especialidad", b =>
                {
                    b.Property<string>("EspecialidadId")
                        .HasColumnType("text")
                        .HasColumnName("especialidadId");

                    b.Property<int>("Descripcion")
                        .HasColumnType("integer")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("EspecialidadId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.Property<string>("MedicoId")
                        .HasColumnType("text")
                        .HasColumnName("medicoId");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Apellido2")
                        .HasColumnType("text")
                        .HasColumnName("apellido2");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cuit");

                    b.Property<string>("DireccionCalle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionCalle");

                    b.Property<string>("DireccionCp")
                        .HasColumnType("text")
                        .HasColumnName("direccionCp");

                    b.Property<string>("DireccionLocalidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionLocalidad");

                    b.Property<string>("DireccionNumero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionNumero");

                    b.Property<string>("DireccionPais")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionPais");

                    b.Property<string>("DireccionProvincia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionProvincia");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("dni");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FechaDeNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Nombre2")
                        .HasColumnType("text")
                        .HasColumnName("nombre2");

                    b.Property<string>("PaisNacimiento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paisNacimiento");

                    b.HasKey("MedicoId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.MedicoEspecialidad", b =>
                {
                    b.Property<string>("MedicoEspecialidadId")
                        .HasColumnType("text")
                        .HasColumnName("medicoEspecialidadId");

                    b.Property<string>("EspecialidadId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EspecialidadId");

                    b.Property<string>("MedicoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medicoId");

                    b.HasKey("MedicoEspecialidadId");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("MedicoId");

                    b.ToTable("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.MedicoEspecialidad", b =>
                {
                    b.HasOne("BlazorMedical.Data.Entities.Especialidad", "Especialidad")
                        .WithMany("MedicoEspecialidades")
                        .HasForeignKey("EspecialidadId")
                        .HasConstraintName("FK_MedicoEspecialidades_Especialidades")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Medico", "Medico")
                        .WithMany("MedicoEspecialidades")
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_MedicoEspecialidades_Medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Especialidad", b =>
                {
                    b.Navigation("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.Navigation("MedicoEspecialidades");
                });
#pragma warning restore 612, 618
        }
    }
}
