// <auto-generated />
using System;
using BlazorMedical.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BlazorMedical.Data.Migrations
{
    [DbContext(typeof(MedicalContext))]
    [Migration("20210407033138_creacionDatos2")]
    partial class creacionDatos2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BlazorMedical.Data.Entities.Especialidad", b =>
                {
                    b.Property<string>("EspecialidadId")
                        .HasColumnType("text")
                        .HasColumnName("especialidadId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("EspecialidadId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.Property<string>("MedicoId")
                        .HasColumnType("text")
                        .HasColumnName("medicoId");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Apellido2")
                        .HasColumnType("text")
                        .HasColumnName("apellido2");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cuit");

                    b.Property<string>("DireccionCalle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionCalle");

                    b.Property<string>("DireccionCp")
                        .HasColumnType("text")
                        .HasColumnName("direccionCp");

                    b.Property<string>("DireccionLocalidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionLocalidad");

                    b.Property<string>("DireccionNumero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionNumero");

                    b.Property<string>("DireccionPaisId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionPais");

                    b.Property<string>("DireccionProvinciaId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionProvinciaId");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("dni");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FechaDeNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Nombre2")
                        .HasColumnType("text")
                        .HasColumnName("nombre2");

                    b.Property<string>("PaisNacimientoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paisNacimientoId");

                    b.Property<string>("ProvinciaId")
                        .HasColumnType("text");

                    b.HasKey("MedicoId");

                    b.HasIndex("DireccionPaisId");

                    b.HasIndex("DireccionProvinciaId");

                    b.HasIndex("PaisNacimientoId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.MedicoEspecialidad", b =>
                {
                    b.Property<string>("MedicoEspecialidadId")
                        .HasColumnType("text")
                        .HasColumnName("medicoEspecialidadId");

                    b.Property<string>("EspecialidadId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EspecialidadId");

                    b.Property<string>("MedicoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medicoId");

                    b.HasKey("MedicoEspecialidadId");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("MedicoId");

                    b.ToTable("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Paciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnName("pacienteId");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Apellido2")
                        .HasColumnType("text")
                        .HasColumnName("apellido2");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cuit");

                    b.Property<string>("DireccionCalle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionCalle");

                    b.Property<string>("DireccionCp")
                        .HasColumnType("text")
                        .HasColumnName("direccionCp");

                    b.Property<string>("DireccionLocalidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionLocalidad");

                    b.Property<string>("DireccionNumero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionNumero");

                    b.Property<string>("DireccionPaisId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionPais");

                    b.Property<string>("DireccionProvinciaId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionProvinciaId");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("dni");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FechaDeNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Nombre2")
                        .HasColumnType("text")
                        .HasColumnName("nombre2");

                    b.Property<string>("PaisNacimientoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paisNacimientoId");

                    b.Property<string>("ProvinciaId")
                        .HasColumnType("text");

                    b.HasKey("PacienteId");

                    b.HasIndex("DireccionPaisId");

                    b.HasIndex("DireccionProvinciaId");

                    b.HasIndex("PaisNacimientoId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Pais", b =>
                {
                    b.Property<string>("PaisId")
                        .HasColumnType("text")
                        .HasColumnName("paisId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("PaisId");

                    b.ToTable("Paises");

                    b.HasData(
                        new
                        {
                            PaisId = "9326889f-0603-4ff5-b802-460a6325ca2207/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Argentina"
                        },
                        new
                        {
                            PaisId = "a361c1b8-3e0c-4fe4-b564-53acb177f20907/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Uruguay"
                        },
                        new
                        {
                            PaisId = "4d669013-bced-4e95-93fd-31689535cd6c07/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Brasil"
                        },
                        new
                        {
                            PaisId = "ed46db37-d75b-407e-964d-a58809d1d42707/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Paraguay"
                        },
                        new
                        {
                            PaisId = "d4970b56-d627-48c1-b9b5-3b353564ed6807/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Chile"
                        },
                        new
                        {
                            PaisId = "e948e59e-cee1-4029-9c69-4aaf2fc6488c07/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Bolivia"
                        });
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Provincia", b =>
                {
                    b.Property<string>("ProvinciaId")
                        .HasColumnType("text")
                        .HasColumnName("provinciaId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("ProvinciaId");

                    b.ToTable("Provincias");

                    b.HasData(
                        new
                        {
                            ProvinciaId = "029b45d4-a980-4aae-a149-d05e39ae36b607/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Buenos Aires"
                        },
                        new
                        {
                            ProvinciaId = "8bf614d9-5d37-44e0-9751-24aa489387f107/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "C.A.B.A"
                        },
                        new
                        {
                            ProvinciaId = "6caffa46-e944-4ed7-b6d9-2bbfd8936a9507/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Córdoba"
                        },
                        new
                        {
                            ProvinciaId = "420f2ebb-2193-4418-995b-3026e402707a07/04/2021 0:31:37",
                            Descripcion = "",
                            Nombre = "Entre Rios"
                        });
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.HasOne("BlazorMedical.Data.Entities.Pais", "DireccionPais")
                        .WithMany("MedicosRecidencia")
                        .HasForeignKey("DireccionPaisId")
                        .HasConstraintName("FK_Medicos_PaisesRecidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", "DireccionProvincia")
                        .WithMany("Medicos")
                        .HasForeignKey("DireccionProvinciaId")
                        .HasConstraintName("FK_Medicos_Provincias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Pais", "PaisNacimiento")
                        .WithMany("Medicos")
                        .HasForeignKey("PaisNacimientoId")
                        .HasConstraintName("FK_Medicos_Paises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", null)
                        .WithMany("MedicosRecidencia")
                        .HasForeignKey("ProvinciaId");

                    b.Navigation("DireccionPais");

                    b.Navigation("DireccionProvincia");

                    b.Navigation("PaisNacimiento");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.MedicoEspecialidad", b =>
                {
                    b.HasOne("BlazorMedical.Data.Entities.Especialidad", "Especialidad")
                        .WithMany("MedicoEspecialidades")
                        .HasForeignKey("EspecialidadId")
                        .HasConstraintName("FK_MedicoEspecialidades_Especialidades")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Medico", "Medico")
                        .WithMany("MedicoEspecialidades")
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_MedicoEspecialidades_Medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Paciente", b =>
                {
                    b.HasOne("BlazorMedical.Data.Entities.Pais", "DireccionPais")
                        .WithMany("PacientesRecidencia")
                        .HasForeignKey("DireccionPaisId")
                        .HasConstraintName("FK_Pacientes_PaisesRecidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", "DireccionProvincia")
                        .WithMany("Pacientes")
                        .HasForeignKey("DireccionProvinciaId")
                        .HasConstraintName("FK_Pacientes_Provincias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Pais", "PaisNacimiento")
                        .WithMany("Pacientes")
                        .HasForeignKey("PaisNacimientoId")
                        .HasConstraintName("FK_Pacientes_Paises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", null)
                        .WithMany("PacientesRecidencia")
                        .HasForeignKey("ProvinciaId");

                    b.Navigation("DireccionPais");

                    b.Navigation("DireccionProvincia");

                    b.Navigation("PaisNacimiento");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Especialidad", b =>
                {
                    b.Navigation("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.Navigation("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Pais", b =>
                {
                    b.Navigation("Medicos");

                    b.Navigation("MedicosRecidencia");

                    b.Navigation("Pacientes");

                    b.Navigation("PacientesRecidencia");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Provincia", b =>
                {
                    b.Navigation("Medicos");

                    b.Navigation("MedicosRecidencia");

                    b.Navigation("Pacientes");

                    b.Navigation("PacientesRecidencia");
                });
#pragma warning restore 612, 618
        }
    }
}
