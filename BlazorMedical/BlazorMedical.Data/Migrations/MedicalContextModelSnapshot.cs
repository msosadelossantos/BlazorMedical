// <auto-generated />
using System;
using BlazorMedical.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BlazorMedical.Data.Migrations
{
    [DbContext(typeof(MedicalContext))]
    partial class MedicalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BlazorMedical.Data.Entities.Especialidad", b =>
                {
                    b.Property<string>("EspecialidadId")
                        .HasColumnType("text")
                        .HasColumnName("especialidadId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("EspecialidadId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.Property<string>("MedicoId")
                        .HasColumnType("text")
                        .HasColumnName("medicoId");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Apellido2")
                        .HasColumnType("text")
                        .HasColumnName("apellido2");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cuit");

                    b.Property<string>("DireccionCalle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionCalle");

                    b.Property<string>("DireccionCp")
                        .HasColumnType("text")
                        .HasColumnName("direccionCp");

                    b.Property<string>("DireccionLocalidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionLocalidad");

                    b.Property<string>("DireccionNumero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionNumero");

                    b.Property<string>("DireccionPaisId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionPaisId");

                    b.Property<string>("DireccionProvinciaId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionProvinciaId");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("dni");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FechaDeNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Nombre2")
                        .HasColumnType("text")
                        .HasColumnName("nombre2");

                    b.Property<string>("PaisNacimientoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paisNacimientoId");

                    b.Property<string>("ProvinciaId")
                        .HasColumnType("text");

                    b.HasKey("MedicoId");

                    b.HasIndex("DireccionPaisId");

                    b.HasIndex("DireccionProvinciaId");

                    b.HasIndex("PaisNacimientoId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.MedicoEspecialidad", b =>
                {
                    b.Property<string>("MedicoEspecialidadId")
                        .HasColumnType("text")
                        .HasColumnName("medicoEspecialidadId");

                    b.Property<string>("EspecialidadId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EspecialidadId");

                    b.Property<string>("MedicoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medicoId");

                    b.HasKey("MedicoEspecialidadId");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("MedicoId");

                    b.ToTable("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Paciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnName("pacienteId");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Apellido2")
                        .HasColumnType("text")
                        .HasColumnName("apellido2");

                    b.Property<string>("Cuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cuit");

                    b.Property<string>("DireccionCalle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionCalle");

                    b.Property<string>("DireccionCp")
                        .HasColumnType("text")
                        .HasColumnName("direccionCp");

                    b.Property<string>("DireccionLocalidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionLocalidad");

                    b.Property<string>("DireccionNumero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionNumero");

                    b.Property<string>("DireccionPaisId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionPaisId");

                    b.Property<string>("DireccionProvinciaId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccionProvinciaId");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("dni");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FechaDeNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Nombre2")
                        .HasColumnType("text")
                        .HasColumnName("nombre2");

                    b.Property<string>("PaisNacimientoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paisNacimientoId");

                    b.Property<string>("ProvinciaId")
                        .HasColumnType("text");

                    b.HasKey("PacienteId");

                    b.HasIndex("DireccionPaisId");

                    b.HasIndex("DireccionProvinciaId");

                    b.HasIndex("PaisNacimientoId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Pais", b =>
                {
                    b.Property<string>("PaisId")
                        .HasColumnType("text")
                        .HasColumnName("paisId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("PaisId");

                    b.ToTable("Paises");

                    b.HasData(
                        new
                        {
                            PaisId = "4b989327-10d9-4de7-813c-d4420d6f2b9907/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Argentina"
                        },
                        new
                        {
                            PaisId = "1742cf43-a5f7-4c84-8d03-7f2f90256fc607/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Uruguay"
                        },
                        new
                        {
                            PaisId = "af89b879-3840-477a-86ab-aff1fd05deb307/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Brasil"
                        },
                        new
                        {
                            PaisId = "7146e45e-3d1e-453a-8f84-e57ae847c05207/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Paraguay"
                        },
                        new
                        {
                            PaisId = "2a2c01aa-2fdd-4a88-90c1-d2d07eb400c307/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Chile"
                        },
                        new
                        {
                            PaisId = "ca0770ad-4625-4262-9a73-992cad73176e07/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Bolivia"
                        });
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Provincia", b =>
                {
                    b.Property<string>("ProvinciaId")
                        .HasColumnType("text")
                        .HasColumnName("provinciaId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("ProvinciaId");

                    b.ToTable("Provincias");

                    b.HasData(
                        new
                        {
                            ProvinciaId = "59284829-9bd3-4b78-99be-6895b945152e07/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Buenos Aires"
                        },
                        new
                        {
                            ProvinciaId = "fb9aafa2-2da2-449b-907a-5ddad2f2bcd907/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "C.A.B.A"
                        },
                        new
                        {
                            ProvinciaId = "c835bdbf-2194-46c9-af23-462bfd4c7f1707/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Córdoba"
                        },
                        new
                        {
                            ProvinciaId = "ef130bc7-bdee-460d-b9b9-2d9dd6ead1cb07/04/2021 0:33:53",
                            Descripcion = "",
                            Nombre = "Entre Rios"
                        });
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.HasOne("BlazorMedical.Data.Entities.Pais", "DireccionPais")
                        .WithMany("MedicosRecidencia")
                        .HasForeignKey("DireccionPaisId")
                        .HasConstraintName("FK_Medicos_PaisesRecidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", "DireccionProvincia")
                        .WithMany("Medicos")
                        .HasForeignKey("DireccionProvinciaId")
                        .HasConstraintName("FK_Medicos_Provincias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Pais", "PaisNacimiento")
                        .WithMany("Medicos")
                        .HasForeignKey("PaisNacimientoId")
                        .HasConstraintName("FK_Medicos_Paises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", null)
                        .WithMany("MedicosRecidencia")
                        .HasForeignKey("ProvinciaId");

                    b.Navigation("DireccionPais");

                    b.Navigation("DireccionProvincia");

                    b.Navigation("PaisNacimiento");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.MedicoEspecialidad", b =>
                {
                    b.HasOne("BlazorMedical.Data.Entities.Especialidad", "Especialidad")
                        .WithMany("MedicoEspecialidades")
                        .HasForeignKey("EspecialidadId")
                        .HasConstraintName("FK_MedicoEspecialidades_Especialidades")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Medico", "Medico")
                        .WithMany("MedicoEspecialidades")
                        .HasForeignKey("MedicoId")
                        .HasConstraintName("FK_MedicoEspecialidades_Medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Paciente", b =>
                {
                    b.HasOne("BlazorMedical.Data.Entities.Pais", "DireccionPais")
                        .WithMany("PacientesRecidencia")
                        .HasForeignKey("DireccionPaisId")
                        .HasConstraintName("FK_Pacientes_PaisesRecidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", "DireccionProvincia")
                        .WithMany("Pacientes")
                        .HasForeignKey("DireccionProvinciaId")
                        .HasConstraintName("FK_Pacientes_Provincias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Pais", "PaisNacimiento")
                        .WithMany("Pacientes")
                        .HasForeignKey("PaisNacimientoId")
                        .HasConstraintName("FK_Pacientes_Paises")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMedical.Data.Entities.Provincia", null)
                        .WithMany("PacientesRecidencia")
                        .HasForeignKey("ProvinciaId");

                    b.Navigation("DireccionPais");

                    b.Navigation("DireccionProvincia");

                    b.Navigation("PaisNacimiento");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Especialidad", b =>
                {
                    b.Navigation("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Medico", b =>
                {
                    b.Navigation("MedicoEspecialidades");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Pais", b =>
                {
                    b.Navigation("Medicos");

                    b.Navigation("MedicosRecidencia");

                    b.Navigation("Pacientes");

                    b.Navigation("PacientesRecidencia");
                });

            modelBuilder.Entity("BlazorMedical.Data.Entities.Provincia", b =>
                {
                    b.Navigation("Medicos");

                    b.Navigation("MedicosRecidencia");

                    b.Navigation("Pacientes");

                    b.Navigation("PacientesRecidencia");
                });
#pragma warning restore 612, 618
        }
    }
}
